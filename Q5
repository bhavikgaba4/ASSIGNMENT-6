#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = NULL;
    }
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() {
        head = NULL;
    }

    // Insert at end
    void insert(int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }

    // Make it circular (for testing)
    void makeCircular() {
        if (head == NULL) return;
        Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = head;  // last node points to head
    }

    // Check if list is circular
    bool isCircular() {
        if (head == NULL)
            return false;

        Node* temp = head->next;

        while (temp != NULL && temp != head)
            temp = temp->next;

        return (temp == head);
    }

    // Display limited nodes (for safety)
    void display() {
        if (head == NULL) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        int count = 0;
        cout << "List: ";
        while (temp != NULL && count < 10) {  // avoid infinite loop
            cout << temp->data << " ";
            temp = temp->next;
            count++;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;

    list.insert(10);
    list.insert(20);
    list.insert(30);
    list.insert(40);

    cout << "Checking before making circular:\n";
    cout << (list.isCircular() ? "List is Circular\n" : "List is NOT Circular\n");

    list.makeCircular(); // now convert to circular
    cout << "\nChecking after making circular:\n";
    cout << (list.isCircular() ? "List is Circular\n" : "List is NOT Circular\n");

    return 0;
}
