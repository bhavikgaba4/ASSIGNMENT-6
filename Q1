#include <iostream>
using namespace std;

// Doubly Linked List Node
class Node {
public:
    int data;
    Node* prev;
    Node* next;

    Node(int val) {
        data = val;
        prev = NULL;
        next = NULL;
    }
};

// Doubly Linked List Class
class DoublyLinkedList {
private:
    Node* head;

public:
    DoublyLinkedList() {
        head = NULL;
    }

    // (a) INSERTION FUNCTIONS
    void insertAtBeginning(int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = newNode;
            return;
        }
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }

    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }

    void insertAfter(int key, int val) {
        Node* temp = head;
        while (temp != NULL && temp->data != key)
            temp = temp->next;
        if (temp == NULL) {
            cout << "Node " << key << " not found!\n";
            return;
        }
        Node* newNode = new Node(val);
        newNode->next = temp->next;
        newNode->prev = temp;
        if (temp->next != NULL)
            temp->next->prev = newNode;
        temp->next = newNode;
    }

    void insertBefore(int key, int val) {
        Node* temp = head;
        while (temp != NULL && temp->data != key)
            temp = temp->next;
        if (temp == NULL) {
            cout << "Node " << key << " not found!\n";
            return;
        }
        Node* newNode = new Node(val);
        newNode->next = temp;
        newNode->prev = temp->prev;
        if (temp->prev != NULL)
            temp->prev->next = newNode;
        else
            head = newNode;
        temp->prev = newNode;
    }

    // (b) DELETION FUNCTION
    void deleteNode(int key) {
        Node* temp = head;

        // Search for the node
        while (temp != NULL && temp->data != key)
            temp = temp->next;

        if (temp == NULL) {
            cout << "Node " << key << " not found!\n";
            return;
        }

        // If node to delete is head
        if (temp == head)
            head = temp->next;

        // Adjust links
        if (temp->next != NULL)
            temp->next->prev = temp->prev;

        if (temp->prev != NULL)
            temp->prev->next = temp->next;

        delete temp;
        cout << "Node " << key << " deleted successfully!\n";
    }

    // (c) SEARCH FUNCTION
    void searchNode(int key) {
        Node* temp = head;
        int pos = 1;
        while (temp != NULL) {
            if (temp->data == key) {
                cout << "Node " << key << " found at position " << pos << "!\n";
                return;
            }
            temp = temp->next;
            pos++;
        }
        cout << "Node " << key << " not found in the list.\n";
    }

    // Display forward
    void displayForward() {
        Node* temp = head;
        cout << "List (forward): ";
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    // Display backward
    void displayBackward() {
        if (head == NULL) return;
        Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;

        cout << "List (backward): ";
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->prev;
        }
        cout << endl;
    }
};

// MAIN PROGRAM
int main() {
    DoublyLinkedList dll;
    int choice, val, key;

    while (true) {
        cout << "\n--- Doubly Linked List Menu ---\n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at End\n";
        cout << "3. Insert After a Node\n";
        cout << "4. Insert Before a Node\n";
        cout << "5. Delete a Node\n";
        cout << "6. Search a Node\n";
        cout << "7. Display Forward\n";
        cout << "8. Display Backward\n";
        cout << "9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value: ";
            cin >> val;
            dll.insertAtBeginning(val);
            break;
        case 2:
            cout << "Enter value: ";
            cin >> val;
            dll.insertAtEnd(val);
            break;
        case 3:
            cout << "Enter key after which to insert: ";
            cin >> key;
            cout << "Enter value: ";
            cin >> val;
            dll.insertAfter(key, val);
            break;
        case 4:
            cout << "Enter key before which to insert: ";
            cin >> key;
            cout << "Enter value: ";
            cin >> val;
            dll.insertBefore(key, val);
            break;
        case 5:
            cout << "Enter node value to delete: ";
            cin >> key;
            dll.deleteNode(key);
            break;
        case 6:
            cout << "Enter node value to search: ";
            cin >> key;
            dll.searchNode(key);
            break;
        case 7:
            dll.displayForward();
            break;
        case 8:
            dll.displayBackward();
            break;
        case 9:
            cout << "Exiting...\n";
            return 0;
        default:
            cout << "Invalid choice!\n";
        }
    }

    return 0;
}
